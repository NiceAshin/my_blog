(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{440:function(t,i,e){"use strict";e.r(i);var r=e(2),s=Object(r.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("设计模式所遵守的七大设计原则")]),t._v(" "),i("blockquote",[i("ul",[i("li",[t._v("单一职责. 一个服务, 一个包, 一个类,一个方法只负责一项职责")]),t._v(" "),i("li",[t._v("依赖倒转. 不依赖具体实现, 而是依赖其抽象")]),t._v(" "),i("li",[t._v("接口隔离. 在实现接口或继承抽象时, 如果基类的某项方法不需要实现, 就不要去继承父类, 而是将其拆分, 只实现需要实现的类")]),t._v(" "),i("li",[t._v("里氏替换. 子类尽量不要去覆盖父类的方法, 如果必须覆盖, 可以采用依赖, 聚合, 组合的方式")]),t._v(" "),i("li",[t._v("迪米特法则. 降低对象间的依赖关系, 对自己依赖的类知道的越少越好")]),t._v(" "),i("li",[t._v("开闭原则. 当修改或添加功能时, 不修改功能的调用方(关闭修改), 而是修改功能的提供方(开放)")]),t._v(" "),i("li",[t._v("合成复用原则. 若只是为服用方法, 尽量不要去继承, 可以使用组合或聚合方式降低耦合性")])])]),t._v(" "),i("h2",{attrs:{id:"创建型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#创建型"}},[t._v("#")]),t._v(" 创建型")]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/design/singleton.html"}},[t._v("单例模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/factory.html"}},[t._v("工厂模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/clone.html"}},[t._v("原型模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/builder.html"}},[t._v("建造者模式(√)")])],1)]),t._v(" "),i("h2",{attrs:{id:"结构型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#结构型"}},[t._v("#")]),t._v(" 结构型")]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/design/adapter.html"}},[t._v("适配器模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/bridge.html"}},[t._v("桥接模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/decorator.html"}},[t._v("装饰者模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/combination.html"}},[t._v("组合模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/face.html"}},[t._v("门面模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/meta.html"}},[t._v("享元模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/proxy.html"}},[t._v("代理模式")])],1)]),t._v(" "),i("h2",{attrs:{id:"行为型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#行为型"}},[t._v("#")]),t._v(" 行为型")]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/design/template.html"}},[t._v("模版方法模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/cmd.html"}},[t._v("命令模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/access.html"}},[t._v("访问者模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/iterator.html"}},[t._v("迭代器模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/observer.html"}},[t._v("观察者模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/agent.html"}},[t._v("中介者模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/memo.html"}},[t._v("备忘录模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/interpreter.html"}},[t._v("解释器模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/state.html"}},[t._v("状态模式")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/strategy.html"}},[t._v("策略模式(√)")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/design/chain.html"}},[t._v("责任链模式(√)")])],1)])])}),[],!1,null,null,null);i.default=s.exports}}]);